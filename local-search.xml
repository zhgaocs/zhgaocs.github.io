<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Basic Linux Commands</title>
    <link href="/2023/09/03/basic-linux-commands/"/>
    <url>/2023/09/03/basic-linux-commands/</url>
    
    <content type="html"><![CDATA[<h3 id="文件和目录列表"><a href="#文件和目录列表" class="headerlink" title="文件和目录列表"></a>文件和目录列表</h3><ul><li><p><code>ls</code> - <em>list</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> [OPTION] [FILE]<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示所有文件和目录，包括当前目录“.”和父目录“..”</span><br><span class="hljs-comment"># -A: 同-a，但不列出当前目录“.”和父目录“..”</span><br><span class="hljs-comment"># -d: directory，只列出目录（不递归列出目录内的文件）</span><br><span class="hljs-comment"># -h: human，以人类可读的格式显示文件大小，例如使用K、M、G等单位</span><br><span class="hljs-comment"># -l: long，以长格式显示文件和目录的详细信息，包括权限、所有者、大小、修改时间等</span><br><span class="hljs-comment"># -R: recursive，递归地显示子目录中的文件和目录</span><br></code></pre></td></tr></table></figure></li><li><p><code>pwd</code> - <em>print working directory</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span> [OPTION]<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -L: logical，强制显示符号链接解析后的路径（默认）</span><br><span class="hljs-comment"># -P: physical，强制显示实际物理路径，而不经过符号链接解析</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h3><ul><li><p><code>touch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">touch</span> [OPTION] FILE <span class="hljs-comment"># 若FILE不存在，新建空白文件</span><br><span class="hljs-comment"># 修改文件的访问和修改时间戳</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: access</span><br><span class="hljs-comment"># -m: modification</span><br></code></pre></td></tr></table></figure></li><li><p><code>cp</code> - <em>copy</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cp</span> [OPTION] SOURCEC DEST <span class="hljs-comment"># Copy SOURCE to DEST</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: 保留所有属性</span><br><span class="hljs-comment"># -d: 复制时保留链接</span><br><span class="hljs-comment"># -f: force，若DEST存在同名文件，不询问，直接覆盖</span><br><span class="hljs-comment"># -i: interactive，若DEST存在同名文件，会询问是否覆盖</span><br><span class="hljs-comment"># -p: 除复制内容外，还将权限、所有权、时间戳一并复制</span><br><span class="hljs-comment"># -r: recursive，若DEST是目录，则会复制该目录下的所有子目录和文件</span><br></code></pre></td></tr></table></figure></li><li><p><code>ln</code> - <em>link</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ln</span> [OPTION] TARGET LINK_NAME <span class="hljs-comment"># 创建一个名为LINK_NAME的链接，指向TARGET</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -f: force，若存在同名LINK_NAME，不询问，直接覆盖</span><br><span class="hljs-comment"># -i: interactive，若存在同名LINK_NAME，会询问是否覆盖</span><br><span class="hljs-comment"># -s: soft，创建软链接</span><br></code></pre></td></tr></table></figure></li><li><p><code>mv</code> - <em>move</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mv</span> [OPTION] SOURCE DEST<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -b: backup，若DEST已经存在同名文件，则将目标文件重命名为备份文件（原文件名后加~）</span><br><span class="hljs-comment"># -f: force，若DEST存在同名文件，不询问，直接覆盖</span><br><span class="hljs-comment"># -i: interactive，若DEST存在同名文件，覆盖前会进行询问</span><br><span class="hljs-comment"># -n: 不覆盖任何已存在的文件或目录</span><br><span class="hljs-comment"># -u: update，当源文件比目标文件新或者目标文件不存在时，才执行移动操作</span><br></code></pre></td></tr></table></figure></li><li><p><code>rm</code> - <em>remove</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">rm</span> [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -f: force，直接删除FILE，不询问</span><br><span class="hljs-comment"># -i: interactive，删除FILE前会进行询问</span><br><span class="hljs-comment"># -r: recursive，将目录下的子目录和文件全部删除</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="处理目录"><a href="#处理目录" class="headerlink" title="处理目录"></a>处理目录</h3><ul><li><p><code>mkdir</code> - <em>make directories</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> [OPTION] DIRECTORY<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -p: parents，确保目录存在，不存在则新建</span><br>$ <span class="hljs-built_in">mkdir</span> -p /path/to/directory<br><span class="hljs-comment"># 上述命令将创建一个名为directory的目录，并在/path/to/路径下创建该目录。如果/path/to/路径不存在，mkdir -p命令将同时创建to目录和directory目录</span><br></code></pre></td></tr></table></figure></li><li><p><code>rmdir</code> - <em>remove directories</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">rmdir</span> [OPTION] DIRECTORY<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -p: parents，删除当前空目录后父目录也为空则一并删除</span><br></code></pre></td></tr></table></figure></li><li><p><code>tree</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tree [OPTION] [DIRECTORY]<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示所有文件和目录，包括隐藏文件</span><br><span class="hljs-comment"># -C: colorization，在文件和目录清单加上色彩，便于区分各种类型</span><br><span class="hljs-comment"># -d: directory，仅显示目录</span><br><span class="hljs-comment"># -f: full，在每个文件或目录之前，显示完整的相对路径名称</span><br><span class="hljs-comment"># -i: 不以阶梯状列出文件或目录名称</span><br><span class="hljs-comment"># -L &lt;LEVEL&gt;: 只显示指定层级范围内的内容</span><br><span class="hljs-comment"># -p: 列出权限标识</span><br><span class="hljs-comment"># -s: size，列出文件或目录大小</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h3><ul><li><p><code>file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ file [OPTION] FILE <span class="hljs-comment"># 辨识文件类型</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -b: brief，列出辨识结果时，不显示文件名称</span><br><span class="hljs-comment"># -L: 直接显示符号连接所指向的文件的类别</span><br><span class="hljs-comment"># -z: 尝试去解读压缩文件的内容</span><br></code></pre></td></tr></table></figure></li><li><p><code>cat</code> - <em>concatenate</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cat</span> [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -b: non-blank，和-n相似，只不过对于空白行不编号</span><br><span class="hljs-comment"># -n: number，由1开始对所有输出的行数编号</span><br><span class="hljs-comment"># -s: squeeze，当遇到有连续两行以上的空白行，就代换为一行的空白行</span><br></code></pre></td></tr></table></figure></li><li><p><code>more</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ more [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -d: 显示每一页内容之前清除屏幕</span><br><span class="hljs-comment"># -c: do not scroll，不进行滚屏操作，只显示一页内容后退出</span><br><span class="hljs-comment"># -&lt;LINES&gt;: 指定每次滚动LINES行</span><br><span class="hljs-comment"># +&lt;LINES&gt;: 从文件的第LINES行开始显示</span><br><span class="hljs-comment"># -s: squeeze，将连续多个空行合并显示为一个空行</span><br></code></pre></td></tr></table></figure></li><li><p><code>less</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ less [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -N: 显示行号</span><br><span class="hljs-comment"># -S: 禁用换行符</span><br><span class="hljs-comment"># +&lt;LINES&gt;: 从文件的第LINES行开始显示</span><br></code></pre></td></tr></table></figure></li><li><p><code>tail</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">tail</span> [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c &lt;CHARS&gt;: 显示的字节数</span><br><span class="hljs-comment"># -n &lt;LINES&gt;: 显示的行数</span><br></code></pre></td></tr></table></figure></li><li><p><code>head</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">head</span> [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c &lt;CHARS&gt;: 显示的字节数</span><br><span class="hljs-comment"># -n &lt;LINES&gt;: 显示的行数</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h3><ul><li><p><code>ps</code> - <em>processes status</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ps [OPTION] <span class="hljs-comment"># 显示当前进程的状态</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -A: 显示所有进程</span><br><span class="hljs-comment"># -e: 等同于-A</span><br><span class="hljs-comment"># -f: 显示完整的进程信息</span><br><span class="hljs-comment"># -p &lt;PID&gt;: 显示指定进程的进程信息</span><br><span class="hljs-comment"># -u &lt;USER&gt;: 显示指定用户的进程</span><br></code></pre></td></tr></table></figure></li><li><p><code>top</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ top [OPTION] <span class="hljs-comment"># 实时系统监控工具</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -d &lt;DELAY_TIME&gt;: delay，top命令每隔DELAY_TIME秒刷新一次</span><br><span class="hljs-comment"># -n &lt;NUM&gt;: number，top命令运行NUM次后自动退出</span><br><span class="hljs-comment"># -p &lt;PID&gt;: 显示指定进程的进程信息</span><br><span class="hljs-comment"># -u &lt;USER&gt;: 显示指定用户名的进程信息</span><br></code></pre></td></tr></table></figure></li><li><p><code>kill</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">kill</span> [OPTION] pid<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -s &lt;SIGVAL/SIGNAME&gt;: 指定要发送的信号，默认为终止信号（SIGTERM）</span><br><span class="hljs-comment"># -&lt;SIGVAL&gt;: 使用信号的缩写形式代替-s选项，例如-9代表强制终止信号（SIGKILL）</span><br>$ <span class="hljs-built_in">kill</span> -l <span class="hljs-comment"># 列出可用的信号列表</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h3><ul><li><p><code>ping</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ping [OPTION] HOST_NAME/IP<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c &lt;NUM&gt;: count，指定发送的ICMP请求次数</span><br><span class="hljs-comment"># -i &lt;INTERVAL&gt;: interval，指定发送间隔</span><br><span class="hljs-comment"># -s &lt;SIZE&gt;: 指定 ICMP 请求的数据包大小</span><br><span class="hljs-comment"># -t &lt;TIME&gt;: 指定IP数据包的生存时间（TTL）</span><br></code></pre></td></tr></table></figure></li><li><p><code>ifconfig</code> - <em>interface configuration</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ifconfig [OPTION] [INTERFACE] <span class="hljs-comment"># 显示或设置网络设备</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示当前可用的所有接口，即使接口已经禁用</span><br><span class="hljs-comment"># -s: short，显示简短的列表</span><br>$ ifconfig  INTERFACE OPTION/ADDRESS<br>$ ifconfig eth0 up <span class="hljs-comment"># 启用eth0接口</span><br>$ ifconfig eth0 192.168.0.10 <span class="hljs-comment"># 设置 eth0 的 IP 地址为 192.168.0.10</span><br></code></pre></td></tr></table></figure></li><li><p><code>traceroute</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ traceroute [OPTION] HOST_NAME <span class="hljs-comment"># 显示数据包到主机间的路径</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -4: IPV4</span><br><span class="hljs-comment"># -6: IPV6</span><br><span class="hljs-comment"># -I: ICMP</span><br><span class="hljs-comment"># -T: TCP</span><br><span class="hljs-comment"># -U: UDP</span><br><span class="hljs-comment"># -m &lt;HOPS&gt;: 设置最大的跳数限制</span><br><span class="hljs-comment"># -p &lt;PORT&gt;: 指定使用的目标端口号</span><br><span class="hljs-comment"># -q &lt;QUERIES&gt;: 设置每个跳点的查询次数</span><br></code></pre></td></tr></table></figure></li><li><p><code>route</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看编辑路由表</span><br>$ route add -net 192.168.0.0 netmask 255.255.255.0 gw 192.168.1.1 <span class="hljs-comment"># 添加一条新的路由</span><br>$ route delete -net 192.168.0.0 netmask 255.255.255.0<br><span class="hljs-comment"># 删除一条现有的路由</span><br></code></pre></td></tr></table></figure></li><li><p><code>netstat</code> - <em>network statistics</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ netstat [OPTION] <span class="hljs-comment"># 用于显示网络状态</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示所有连线中的socket</span><br><span class="hljs-comment"># -i: interface，显示网络界面信息表单</span><br><span class="hljs-comment"># -p: 显示正在使用socket的程序识别码和程序名称</span><br><span class="hljs-comment"># -r: route，显示路由表</span><br><span class="hljs-comment"># -s: statistics，显示网络工作信息统计表</span><br><span class="hljs-comment"># -t: TCP，显示TCP传输协议的连线状况</span><br><span class="hljs-comment"># -u: UDP，显示UDP传输协议的连线状况</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="磁盘相关"><a href="#磁盘相关" class="headerlink" title="磁盘相关"></a>磁盘相关</h3><ul><li><p><code>mount</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mount [OPTION] &lt;DEVICE&gt; &lt;DIR&gt; <span class="hljs-comment"># 挂载Linux系统外的文件</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -o: option，用于指定挂载选项，例如读写权限、访问控制等</span><br><span class="hljs-comment"># -t: type，用于指定文件系统类型。如果没有指定类型，mount命令将尝试自动检测文件系统类型</span><br>$ mount /dev/sdb1 /mnt <span class="hljs-comment"># 将设备/dev/sdb1挂载到/mnt</span><br>$ mount -t nfs 192.168.0.1:shared /mnt/nfs <span class="hljs-comment"># 挂载远程nfs共享</span><br></code></pre></td></tr></table></figure></li><li><p><code>umount</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ umount [OPTION] &lt;DIR&gt; <span class="hljs-comment"># 卸除文件系统</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -l: lazy，延迟卸载，不会中断当前正在使用该文件系统的进程</span><br><span class="hljs-comment"># -f: force，强制卸载</span><br></code></pre></td></tr></table></figure></li><li><p><code>df</code> - <em>disk free</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">df</span> [OPTION] [FILE] <span class="hljs-comment"># 显示文件系统磁盘使用情况统计</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示所有文件系统，包括系统保留的文件系统</span><br><span class="hljs-comment"># -h: human，以人类可读的格式显示磁盘空间大小</span><br><span class="hljs-comment"># -i: inode，显示文件系统的 inode 使用情况</span><br></code></pre></td></tr></table></figure></li><li><p><code>du</code> - <em>disk usage</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">du</span> [OPTION] [DIRECTORY|FILE] <span class="hljs-comment"># 显示目录或文件的大小</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: all，显示所有文件和目录的磁盘使用量，包括隐藏文件</span><br><span class="hljs-comment"># -c: 显示占用磁盘空间大小总和</span><br><span class="hljs-comment"># -D: 显示符号链接对应源文件大小</span><br><span class="hljs-comment"># -h: human，以人类可读的格式显示磁盘使用量 </span><br><span class="hljs-comment"># -P: 不显示符号链接对应源文件大小（默认）</span><br><span class="hljs-comment"># -s: summarize，仅显示总计</span><br><span class="hljs-comment"># -S: separate，显示个别目录的大小时，并不含其子目录的大小</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><code>sort</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">sort</span> [OPTION] [FILE] <span class="hljs-comment"># 按照行为单位对文件进行排序</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -b: blank，忽略每行前面开始出的空格字符</span><br><span class="hljs-comment"># -c: check，检查文件是否已排序，如果未排序则输出警告信息</span><br><span class="hljs-comment"># -d: dictionary，排序时，处理英文字母、数字及空格字符，忽略其他的字符</span><br><span class="hljs-comment"># -f: fold，将小写字母视为大写字母</span><br><span class="hljs-comment"># -i: ignore，除了040至176之间的ASCII字符外，忽略其他的字符</span><br><span class="hljs-comment"># -m: merge，将几个排序好的文件进行合并</span><br><span class="hljs-comment"># -o &lt;OUTPUT&gt;: 将排序后的结果存入指定的文件</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li><p><code>grep</code> - <em>global regular expression print</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ grep [OPTION] PATTERN [FILE] <span class="hljs-comment"># 查找文件里符合条件的字符串或正则表达式</span><br><span class="hljs-comment"># PATTERN: 要查找的字符串或正则表达式</span><br><span class="hljs-comment"># FILE: 要查找的文件名，可以同时查找多个文件，如果省略，则从标准输入中读取数据</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c：只打印匹配的行数</span><br><span class="hljs-comment"># -i: ignore，忽略大小写</span><br><span class="hljs-comment"># -l：只打印匹配的文件名</span><br><span class="hljs-comment"># -n: line number，显示匹配的行号</span><br><span class="hljs-comment"># -r：recursive，递归查找子目录中的文件</span><br><span class="hljs-comment"># -v：反向查找，只打印不匹配的行</span><br><span class="hljs-comment"># -w：匹配整个单词，而不是部分匹配</span><br></code></pre></td></tr></table></figure></li><li><p><code>find</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ find [PATH] [EXPRESSION]<br><span class="hljs-comment"># PATH是要查找的目录路径，可以是一个目录或文件名，也可以是多个路径，多个路径之间用空格分隔，如果未指定路径，则默认为当前目录</span><br><span class="hljs-comment"># EXPRESSION是可选参数，用于指定查找的条件，可以是文件名、文件类型、文件大小等等</span><br><span class="hljs-comment"># -group &lt;GROUPNAME&gt;：按文件所属组查找</span><br><span class="hljs-comment"># -mtime &lt;DAYS&gt;：按文件修改时间查找文件，以指定天数为基准。+n表示修改时间早于n天前，-n表示修改时间晚于n天前，n表示修改时间为n天前</span><br><span class="hljs-comment"># -name &lt;PATTERN&gt;：按文件名匹配模式查找文件，可以使用通配符（如*和?）进行模式匹配</span><br><span class="hljs-comment"># -size &lt;SIZE&gt;：按文件大小查找文件，可以指定文件的大小范围。+n表示大于n个512字节块，-n表示小于n个512字节块，n表示正好n个512字节块</span><br><span class="hljs-comment"># -type &lt;TYPE&gt;：按文件类型查找文件，如f表示普通文件，d表示目录，l表示符号链接等</span><br><span class="hljs-comment"># -user &lt;USERNAME&gt;：按文件所有者查找</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="压缩打包"><a href="#压缩打包" class="headerlink" title="压缩打包"></a>压缩打包</h3><ul><li><p><code>gzip</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gzip [OPTION] FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -a: ascii，使用ASCII文字模式 </span><br><span class="hljs-comment"># -c: 将输出发送到标准输出，而不修改原始文件</span><br><span class="hljs-comment"># -d: decompress，解压缩文件</span><br><span class="hljs-comment"># -l: list，列出压缩文件的相关信息</span><br><span class="hljs-comment"># -r: recursive，递归处理，将指定目录下的所有文件及子目录一并处理</span><br><span class="hljs-comment"># -S &lt;SUFFIX&gt;/--suffix &lt;SUFFIX&gt;: 更改压缩字尾字符串（注意，SUFFIX需要以.开始）</span><br><span class="hljs-comment"># -t: test，测试压缩文件的完整性</span><br><span class="hljs-comment"># -1~-9: 指定压缩级别，数字越大表示压缩比越高但速度较慢，默认为6</span><br><br>$ gzip -c FILE &gt; FILE.gz <span class="hljs-comment"># gzip压缩保留原文件</span><br>$ gzip -<span class="hljs-built_in">cd</span> FILE.gz &gt; FILE <span class="hljs-comment"># gzip解压缩保留原文件</span><br></code></pre></td></tr></table></figure></li><li><p><code>tar</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ tar [OPTION] [FILE]<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c: create，创建归档文件</span><br><span class="hljs-comment"># -C:</span><br><span class="hljs-comment"># -f &lt;ARCHIVE&gt;: file，指定要创建的归档文件的名称</span><br><span class="hljs-comment"># -k: keep，</span><br><span class="hljs-comment"># -x: 从备份文件中还原文件</span><br><span class="hljs-comment"># -z: 通过gzip指令处理备份文件</span><br><span class="hljs-comment"># -Z: 通过compress指令处理备份文件</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="权限、用户、组"><a href="#权限、用户、组" class="headerlink" title="权限、用户、组"></a>权限、用户、组</h3><ul><li><p><code>chmod</code> - <em>change mode</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chmod</span> [OPTION] MODE FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -R: recursive，对目前目录下的所有文件与子目录进行相同的权限变更(即以递归的方式逐个变更)</span><br><span class="hljs-comment"># MODE有两种模式</span><br><span class="hljs-comment"># 符号模式 who(u/g/o/a) operator(+-=) permission(rwxX)</span><br><span class="hljs-comment"># 八进制语法 文件或目录的权限位是由9个权限位来控制，每三位为一组，它们分别是文件所有者（User）的读、写、执行，用户组（Group）的读、写、执行以及其它用户（Other）的读、写、执行，其中读位为4，写位为2，执行位为1</span><br>$ <span class="hljs-built_in">chmod</span> -c u+rw file.txt <span class="hljs-comment"># 将文件 file.txt的所有者赋予读写权限，并显示权限更改操作</span><br>$ <span class="hljs-built_in">chmod</span> -c 111 file.txt <span class="hljs-comment"># 将文件file.txt的权限改为所有人仅可执行</span><br></code></pre></td></tr></table></figure></li><li><p><code>chown</code> - <em>change owner</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chown</span> [OPTION] OWNER [:GROUP] FILE <span class="hljs-comment"># 使用权限为root</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c: 显示更改的部分的信息</span><br><span class="hljs-comment"># -R: recursive，递归地更改所有者，用于目录及其内容</span><br>$ <span class="hljs-built_in">chown</span> runoob:runoobgroup file.txt <span class="hljs-comment"># 将文件 file.txt 的拥有者设为runoob，群体的使用者设为runoobgroup</span><br></code></pre></td></tr></table></figure></li><li><p><code>chgrp</code> - <em>change group</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">chgrp</span> OPTION NEW_GROUP FILE <span class="hljs-comment"># 允许普通用户改变文件所属的组，只要该用户是该组的一员</span><br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -c: 显示更改的部分的信息</span><br><span class="hljs-comment"># -R: recursive，递归地更改所属组，用于目录及其内容</span><br></code></pre></td></tr></table></figure></li></ul><hr><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><ul><li><p><code>sed</code> - <em>stream editor</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sed [OPTION] [FILE]<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -e &lt;SCRIPT&gt;: expression，以选项中指定的script来处理输入的文本文件</span><br><span class="hljs-comment"># -f &lt;SCRIPT_FILE&gt;: file，以选项中指定的script文件来处理输入的文本文件</span><br><br><span class="hljs-comment"># -e后接的script操作说明</span><br><span class="hljs-comment"># a: append，a的后面可以接字串，而这些字串会在新的一行出现(当前行的下一行)</span><br>$ sed -e 6a\Hello\ World <span class="hljs-built_in">test</span> <span class="hljs-comment"># 在文件test的第6行后面插入一行内容&quot;Hello World&quot;</span><br>$ sed -e <span class="hljs-string">&#x27;6a\Hello World&#x27;</span> <span class="hljs-built_in">test</span> <span class="hljs-comment"># 等价于上一个命令</span><br><span class="hljs-comment"># c: 替换</span><br>$ sed -e <span class="hljs-string">&#x27;6c\Hello World&#x27;</span> <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将文件test的第6行替换为&quot;Hello World&quot;</span><br><span class="hljs-comment"># d: delete，删除，不接字串</span><br>$ sed -e 6d <span class="hljs-built_in">test</span> <span class="hljs-comment"># 删除文件test第4行</span><br><span class="hljs-comment"># i: insert，插入，i的后面可以接字串，而这些字串会在新的一行出现(当前行的下一行)；</span><br>$ sed -e 6i\Hello\ World <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将文件test的第6行前面插入一行内容&quot;Hello World&quot;</span><br><span class="hljs-comment"># p: print，通常与-n一起使用</span><br>$ sed -n -e 6p <span class="hljs-built_in">test</span> <span class="hljs-comment"># 只打印文件test的第6行</span><br><span class="hljs-comment"># s: 替换，可以搭配正则表达式</span><br>$ sed -e s/ab/AB/g <span class="hljs-built_in">test</span> <span class="hljs-comment"># 将文件test的每一行中字串ab替换为AB</span><br></code></pre></td></tr></table></figure></li><li><p><code>awk</code> - <em>Aho, Weinberger, and Kernighan</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ awk [OPTION] <span class="hljs-string">&#x27;SCRIPT&#x27;</span> FILE<br>$ awk [OPTION] -f SCRIPT_FILE FILE<br><span class="hljs-comment"># OPTION</span><br><span class="hljs-comment"># -F &#x27;SEPARATOR&#x27;: field-separator，指定字段分隔符，默认为连续的空格或制表符。例如，-F &quot;:&quot; 表示使用冒号作为字段分隔符</span><br><span class="hljs-comment"># -v var=value：定义一个变量并赋予初始值。例如，-v name=John定义一个名为name的变量，并将其值设为 &quot;John&quot;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Chapter 11</title>
    <link href="/2023/09/03/cpp-primer-chapter-11/"/>
    <url>/2023/09/03/cpp-primer-chapter-11/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Primer-Chapter-11"><a href="#C-Primer-Chapter-11" class="headerlink" title="C++ Primer Chapter 11"></a>C++ Primer Chapter 11</h1><h2 id="1-辅助类pair"><a href="#1-辅助类pair" class="headerlink" title="1. 辅助类pair"></a>1. 辅助类<code>pair</code></h2><h3 id="1-1-头文件"><a href="#1-1-头文件" class="headerlink" title="1.1 头文件"></a>1.1 头文件</h3><p><code>&lt;utility&gt;</code></p><h3 id="1-2-类模板声明"><a href="#1-2-类模板声明" class="headerlink" title="1.2 类模板声明"></a>1.2 类模板声明</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pair</span>;<br></code></pre></td></tr></table></figure><h3 id="1-3-成员类型"><a href="#1-3-成员类型" class="headerlink" title="1.3 成员类型"></a>1.3 成员类型</h3><table><thead><tr><th align="center">成员类型</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center"><code>first_type</code></td><td align="center"><code>T1</code></td></tr><tr><td align="center"><code>second_type</code></td><td align="center"><code>T2</code></td></tr></tbody></table><h3 id="1-4-成员对象"><a href="#1-4-成员对象" class="headerlink" title="1.4 成员对象"></a>1.4 成员对象</h3><table><thead><tr><th align="center">成员名</th><th align="center">类型</th></tr></thead><tbody><tr><td align="center"><code>first</code></td><td align="center"><code>T1</code></td></tr><tr><td align="center"><code>second</code></td><td align="center"><code>T2</code></td></tr></tbody></table><h3 id="1-5-成员函数"><a href="#1-5-成员函数" class="headerlink" title="1.5 成员函数"></a>1.5 成员函数</h3><h4 id="1-5-1-构造函数"><a href="#1-5-1-构造函数" class="headerlink" title="1.5.1 构造函数"></a>1.5.1 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">pair</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-built_in">pair</span>(<span class="hljs-type">const</span> T1 &amp;x, <span class="hljs-type">const</span> T2 &amp;y);<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U2</span>&gt;<br><span class="hljs-built_in">pair</span>(U1 &amp;&amp;x, U2 &amp;&amp;y);<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U2</span>&gt;<br><span class="hljs-built_in">pair</span>(<span class="hljs-type">const</span> pair&lt;U1, U2&gt; &amp;p);<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U2</span>&gt;<br><span class="hljs-built_in">pair</span>(pair&lt;U1, U2&gt; &amp;&amp;p);<br><br><span class="hljs-built_in">pair</span>(<span class="hljs-type">const</span> pair &amp;p) = <span class="hljs-keyword">default</span>; <span class="hljs-comment">// copy constructor</span><br><br><span class="hljs-built_in">pair</span>(pair &amp;&amp;p) = <span class="hljs-keyword">default</span>; <span class="hljs-comment">// move constructor</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; p1; <span class="hljs-comment">// 0 0</span><br><span class="hljs-function">std::pair&lt;<span class="hljs-type">double</span>, <span class="hljs-type">double</span>&gt; <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">1.1</span>, <span class="hljs-number">1.9</span>)</span></span>;<br><span class="hljs-function">std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">// 1 1</span><br></code></pre></td></tr></table></figure><h4 id="1-5-2-operator-：赋值内容"><a href="#1-5-2-operator-：赋值内容" class="headerlink" title="1.5.2 operator=：赋值内容"></a>1.5.2 <code>operator=</code>：赋值内容</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">pair &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> pair &amp;other);<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U2</span>&gt;<br>pair &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> pair&lt;U1, U2&gt; &amp;other);<br><br>pair &amp;<span class="hljs-keyword">operator</span>=(pair &amp;&amp;other) <span class="hljs-keyword">noexcept</span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">U1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U2</span>&gt;<br>pair &amp;<span class="hljs-keyword">operator</span>=(pair&lt;U1, U2&gt; &amp;&amp;other);<br></code></pre></td></tr></table></figure><h4 id="1-5-3-swap：交换内容"><a href="#1-5-3-swap：交换内容" class="headerlink" title="1.5.3 swap：交换内容"></a>1.5.3 <code>swap</code>：交换内容</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(pair &amp;other)</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><h3 id="1-6-非成员函数"><a href="#1-6-非成员函数" class="headerlink" title="1.6 非成员函数"></a>1.6 非成员函数</h3><h4 id="1-6-1-make-pair：创建一个-pair-对象，其类型根据各实参类型定义"><a href="#1-6-1-make-pair：创建一个-pair-对象，其类型根据各实参类型定义" class="headerlink" title="1.6.1 make_pair：创建一个 pair 对象，其类型根据各实参类型定义"></a>1.6.1 <code>make_pair</code>：创建一个 <code>pair</code> 对象，其类型根据各实参类型定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-function">std::pair&lt;T1, T2&gt; <span class="hljs-title">make_pair</span><span class="hljs-params">(T1 &amp;&amp;t, T2 &amp;&amp;u)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p = std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>std::cout &lt;&lt; p.first &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; p.second &lt;&lt; std::endl; <span class="hljs-comment">// 0 1</span><br></code></pre></td></tr></table></figure><h4 id="1-6-2-std-swap：特化std-swap算法"><a href="#1-6-2-std-swap：特化std-swap算法" class="headerlink" title="1.6.2 std::swap：特化std::swap算法"></a>1.6.2 <code>std::swap</code>：特化<code>std::swap</code>算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(std::pair&lt;T1, T2&gt; &amp;x, std::pair&lt;T1, T2&gt; &amp;y)</span> <span class="hljs-title">noexcept</span><span class="hljs-params">(<span class="hljs-keyword">noexcept</span>(x.swap(y)))</span></span>;<br></code></pre></td></tr></table></figure><h4 id="1-6-3-std-get：访问pair的元素"><a href="#1-6-3-std-get：访问pair的元素" class="headerlink" title="1.6.3 std::get：访问pair的元素"></a>1.6.3 <code>std::get</code>：访问<code>pair</code>的元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;std::<span class="hljs-type">size_t</span> I, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">typename</span> std::tuple_element&lt;I, std::pair&lt;T1, T2&gt;&gt;::<span class="hljs-function">type &amp;</span><br><span class="hljs-function"><span class="hljs-title">get</span><span class="hljs-params">(std::pair&lt;T1, T2&gt; &amp;p)</span> <span class="hljs-keyword">noexcept</span></span>; <span class="hljs-comment">// I为0或1</span><br><br><span class="hljs-comment">// 获取T.first的引用</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> T &amp;<span class="hljs-title">get</span><span class="hljs-params">(std::pair&lt;T, U&gt; &amp;p)</span> <span class="hljs-keyword">noexcept</span></span>; <span class="hljs-comment">// T和U必须为不同类型</span><br><br><span class="hljs-comment">// 获取T.second的引用</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">U</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> T &amp;<span class="hljs-title">get</span><span class="hljs-params">(std::pair&lt;U, T&gt; &amp;p)</span> <span class="hljs-keyword">noexcept</span></span>; <span class="hljs-comment">// T和U必须为不同类型</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> p = std::<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1.2f</span>);<br>std::cout &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-number">0</span>&gt;(p) &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; std::<span class="hljs-built_in">get</span>&lt;<span class="hljs-type">float</span>&gt;(p) &lt;&lt; std::endl; <span class="hljs-comment">// 0 1.2</span><br></code></pre></td></tr></table></figure><h2 id="2-关联容器"><a href="#2-关联容器" class="headerlink" title="2. 关联容器"></a>2. 关联容器</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><ul><li><p>有序关联容器</p><ul><li><code>map</code></li><li><code>set</code> </li><li><code>multimap</code></li><li><code>multiset</code></li></ul></li><li><p>无序关联容器</p><ul><li><code>unordered_map</code></li><li><code>unordered_set</code></li><li><code>unordered_multimap</code></li><li><code>unordered_multiset</code></li></ul></li></ul><table><thead><tr><th align="center">容器</th><th align="center">头文件</th><th align="center">实现</th><th align="center">元素</th><th align="center">键是否唯一</th></tr></thead><tbody><tr><td align="center"><code>map</code></td><td align="center"><code>map</code></td><td align="center">红黑树</td><td align="center">键值对</td><td align="center">&#10004;</td></tr><tr><td align="center"><code>set</code></td><td align="center"><code>set</code></td><td align="center">红黑树</td><td align="center">键</td><td align="center">&#10004;</td></tr><tr><td align="center"><code>multimap</code></td><td align="center"><code>map</code></td><td align="center">红黑树</td><td align="center">键值对</td><td align="center">&#10006;</td></tr><tr><td align="center"><code>multiset</code></td><td align="center"><code>set</code></td><td align="center">红黑树</td><td align="center">键</td><td align="center">&#10006;</td></tr><tr><td align="center"><code>unordered_map</code></td><td align="center"><code>unordered_map</code></td><td align="center">哈希表</td><td align="center">键值对</td><td align="center">&#10004;</td></tr><tr><td align="center"><code>unordered_set</code></td><td align="center"><code>unordered_set</code></td><td align="center">哈希表</td><td align="center">键</td><td align="center">&#10004;</td></tr><tr><td align="center"><code>unordered_multimap</code></td><td align="center"><code>unordered_map</code></td><td align="center">哈希表</td><td align="center">键值对</td><td align="center">&#10006;</td></tr><tr><td align="center"><code>unordered_multiset</code></td><td align="center"><code>unordered_set</code></td><td align="center">哈希表</td><td align="center">键</td><td align="center">&#10006;</td></tr></tbody></table><h3 id="2-2-成员类型"><a href="#2-2-成员类型" class="headerlink" title="2.2 成员类型"></a>2.2 成员类型</h3><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key_type</code></td><td><code>Key</code></td></tr><tr><td><code>mapped_type</code></td><td><code>T</code></td></tr><tr><td><code>value_type</code></td><td><code>std::pair&lt;const Key, T&gt;</code></td></tr><tr><td><code>iterator</code></td><td>指向<code>value_type</code>的老式双向迭代器</td></tr></tbody></table><h3 id="2-3-map"><a href="#2-3-map" class="headerlink" title="2.3 map"></a>2.3 <code>map</code></h3><h4 id="2-3-1-类模板声明"><a href="#2-3-1-类模板声明" class="headerlink" title="2.3.1 类模板声明"></a>2.3.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> = std::less&lt;Key&gt;,<br>          <span class="hljs-keyword">class</span> Allocator = std::allocator&lt;std::pair&lt;<span class="hljs-type">const</span> Key, T&gt;&gt;&gt;<br><span class="hljs-keyword">class</span> map;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-构造函数"><a href="#2-3-2-构造函数" class="headerlink" title="2.3.2 构造函数"></a>2.3.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">map</span>();<br><br><span class="hljs-comment">// [first, last)</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-built_in">map</span>(InputIt first, InputIt last, <span class="hljs-type">const</span> Compare &amp;comp = <span class="hljs-built_in">Compare</span>(), <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-built_in">map</span>(<span class="hljs-type">const</span> map &amp;other);<br><span class="hljs-built_in">map</span>(map &amp;&amp;other);<br><br><span class="hljs-built_in">map</span>(std::initializer_list&lt;value_type&gt; init, <span class="hljs-type">const</span> Compare &amp;comp = <span class="hljs-built_in">Compare</span>(), <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; m1;<br>std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; m2&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">97</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">98</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br><br><span class="hljs-keyword">auto</span> it = m2.<span class="hljs-built_in">cbegin</span>();<br>++it;<br><span class="hljs-function">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">m3</span><span class="hljs-params">(m2.cbegin(), it)</span></span>; <span class="hljs-comment">// m3:&#123;&#123;&#x27;a&#x27;, 97&#125;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3-元素访问"><a href="#2-3-3-元素访问" class="headerlink" title="2.3.3 元素访问"></a>2.3.3 元素访问</h4><ul><li><code>at</code>：访问指定的元素，同时进行越界检查</li><li><code>operator[]</code>：访问<strong>或插入</strong>指定的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ascii&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">97</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">98</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br>std::cout &lt;&lt; ascii.<span class="hljs-built_in">at</span>(<span class="hljs-string">&#x27;c&#x27;</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 99</span><br>std::cout &lt;&lt; ascii[<span class="hljs-string">&#x27;a&#x27;</span>] &lt;&lt; std::endl;    <span class="hljs-comment">// 97</span><br>std::cout &lt;&lt; ascii[<span class="hljs-string">&#x27;d&#x27;</span>] &lt;&lt; std::endl;    <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h4 id="2-3-4-迭代器"><a href="#2-3-4-迭代器" class="headerlink" title="2.3.4  迭代器"></a>2.3.4  迭代器</h4><ul><li><code>begin</code> <code>cbegin</code>：返回指向起始的迭代器</li><li><code>end</code> <code>cend</code>：返回指向末尾的迭代器</li><li><code>rbegin</code> <code>crbegin</code>：返回指向起始的逆向迭代器</li><li><code>rend</code> <code>crend</code>：返回指向末尾的逆向迭代器</li></ul><h4 id="2-3-5-容量"><a href="#2-3-5-容量" class="headerlink" title="2.3.5 容量"></a>2.3.5 容量</h4><ul><li><p><code>empty</code>：检查容器是否为空</p></li><li><p><code>size</code>：返回容纳的元素数</p></li><li><p><code>max_size</code>：返回可容纳的最大元素数</p></li></ul><h4 id="2-3-6-修改"><a href="#2-3-6-修改" class="headerlink" title="2.3.6 修改"></a>2.3.6 修改</h4><ul><li><code>clear</code>：清除内容</li><li><code>insert</code>：插入元素或结点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">const</span> value_type &amp;value)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">P</span>&gt;<br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">insert</span><span class="hljs-params">(P &amp;&amp;value)</span></span>; <span class="hljs-comment">// C++11</span><br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">insert</span><span class="hljs-params">(value_type &amp;&amp;value)</span></span>; <span class="hljs-comment">// C++17</span><br><br><span class="hljs-comment">// 插入value到尽可能接近正好在pos之前的位置</span><br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, <span class="hljs-type">const</span> value_type &amp;value)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">P</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, P &amp;&amp;value)</span></span>; <span class="hljs-comment">// C++11</span><br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, value_type &amp;&amp;value)</span></span>; <span class="hljs-comment">// C++17</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(InputIt first, InputIt last)</span></span>; <span class="hljs-comment">// [first, last)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(std::initializer_list&lt;value_type&gt; ilist)</span></span>; <span class="hljs-comment">// C++11</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ascii&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">97</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">98</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br>ascii.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">100</span>&#125;);<br>ascii.<span class="hljs-built_in">insert</span>(ascii.<span class="hljs-built_in">cbegin</span>(), &#123;<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-number">101</span>&#125;);<br>ascii.<span class="hljs-built_in">insert</span>(&#123;&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-number">102</span>&#125;, &#123;<span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-number">103</span>&#125;&#125;);<br></code></pre></td></tr></table></figure><ul><li><code>insert_or_assign</code>*(C++17)*：插入元素，或若键已存在则赋值给当前元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>&gt;<br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">insert_or_assign</span><span class="hljs-params">(<span class="hljs-type">const</span> key_type &amp;k, M &amp;&amp;obj)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>&gt;<br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">insert_or_assign</span><span class="hljs-params">(key_type &amp;&amp;k, M &amp;&amp;obj)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">insert_or_assign</span><span class="hljs-params">(const_iterator hint, <span class="hljs-type">const</span> key_type &amp;k, M &amp;&amp;obj)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">insert_or_assign</span><span class="hljs-params">(const_iterator hint, key_type &amp;&amp;k, M &amp;&amp;obj)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ascii&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">96</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">98</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br>ascii.<span class="hljs-built_in">insert_or_assign</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">97</span>);  <span class="hljs-comment">// ascii:&#123;&#123;&#x27;a&#x27;, 97&#125;, &#123;&#x27;b&#x27;, 98&#125;, &#123;&#x27;c&#x27;, 99&#125;&#125;</span><br>ascii.<span class="hljs-built_in">insert_or_assign</span>(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// ascii:&#123;&#123;&#x27;a&#x27;, 97&#125;, &#123;&#x27;b&#x27;, 98&#125;, &#123;&#x27;c&#x27;, 99&#125;, &#123;&#x27;d&#x27;, 100&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>emplace</code>*(C++11)*：原位构造元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">std::pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">emplace</span><span class="hljs-params">(Args &amp;&amp;...args)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ascii&#123;&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">97</span>&#125;, &#123;<span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">98</span>&#125;, &#123;<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br>ascii.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">// ascii:&#123;&#123;&#x27;a&#x27;, 97&#125;, &#123;&#x27;b&#x27;, 98&#125;, &#123;&#x27;c&#x27;, 99&#125;, &#123;&#x27;d&#x27;, 100&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>emplace_hint</code>*(C++11)*：使用提示原位构造元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">iterator <span class="hljs-title">emplace_hint</span><span class="hljs-params">(const_iterator hint, Args &amp;&amp;...args)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>try_emplace</code>*(C++17)*：若键不存在则原位构造元素并插入，若键存在则不做任何事</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">try_emplace</span><span class="hljs-params">(<span class="hljs-type">const</span> key_type &amp;k, Args &amp;&amp;...args)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">pair&lt;iterator, <span class="hljs-type">bool</span>&gt; <span class="hljs-title">try_emplace</span><span class="hljs-params">(key_type &amp;&amp;k, Args &amp;&amp;...args)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">iterator <span class="hljs-title">try_emplace</span><span class="hljs-params">(const_iterator hint, <span class="hljs-type">const</span> key_type &amp;k, Args &amp;&amp;...args)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">iterator <span class="hljs-title">try_emplace</span><span class="hljs-params">(const_iterator hint, key_type &amp;&amp;k, Args &amp;&amp;...args)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>erase</code>：擦除元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(iterator pos)</span></span>;<br><span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(const_iterator pos)</span></span>;<br><span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(const_iterator first, const_iterator last)</span></span>;<br><span class="hljs-function">size_type <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">size_type <span class="hljs-title">erase</span><span class="hljs-params">(K &amp;&amp;x)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>swap</code>：交换内容</li><li><code>extract</code>*(C++17)*：从另一容器释出结点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">node_type <span class="hljs-title">extract</span><span class="hljs-params">(const_iterator position)</span></span>;<br><span class="hljs-function">node_type <span class="hljs-title">extract</span><span class="hljs-params">(<span class="hljs-type">const</span> key_type &amp;k)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">node_type <span class="hljs-title">extract</span><span class="hljs-params">(K &amp;&amp;x)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>merge</code>*(C++17)*：从另一容器接合结点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(std::map&lt;Key, T, C2, Allocator&gt; &amp;source)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(std::map&lt;Key, T, C2, Allocator&gt; &amp;&amp;source)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(std::multimap&lt;Key, T, C2, Allocator&gt; &amp;source)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">C2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(std::multimap&lt;Key, T, C2, Allocator&gt; &amp;&amp;source)</span></span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-7-查找"><a href="#2-3-7-查找" class="headerlink" title="2.3.7 查找"></a>2.3.7 查找</h4><ul><li><code>count</code>：返回匹配特定键的元素数量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">size_type <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>find</code>：寻找带有特定键的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">iterator <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span></span>;<br><br><span class="hljs-function">const_iterator <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span></span>; <span class="hljs-comment">// C++14</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">const_iterator <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// C++14</span><br></code></pre></td></tr></table></figure><ul><li><code>contains</code>*(C++20)*：检查容器是否含有带特定键的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>equal_range</code>：返回匹配特定键的元素范围</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::pair&lt;iterator, iterator&gt; <span class="hljs-title">equal_range</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span></span>;<br><br><span class="hljs-function">std::pair&lt;const_iterator, const_iterator&gt; <span class="hljs-title">equal_range</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">std::pair&lt;iterator, iterator&gt; <span class="hljs-title">equal_range</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span></span>; <span class="hljs-comment">// C++14</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">std::pair&lt;const_iterator, const_iterator&gt; <span class="hljs-title">equal_range</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// C++14</span><br></code></pre></td></tr></table></figure><ul><li><code>lower_bound</code>：返回指向首个不小于给定键的元素的迭代器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">iterator <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span></span>;<br><br><span class="hljs-function">const_iterator <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span></span>; <span class="hljs-comment">// C++14</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">const_iterator <span class="hljs-title">lower_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// C++14</span><br></code></pre></td></tr></table></figure><ul><li><code>upper_bound</code>：返回指向首个大于给定键的元素的迭代器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">iterator <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span></span>;<br><br><span class="hljs-function">const_iterator <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span></span>; <span class="hljs-comment">// C++14</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">K</span>&gt;<br><span class="hljs-function">const_iterator <span class="hljs-title">upper_bound</span><span class="hljs-params">(<span class="hljs-type">const</span> K &amp;x)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// C++14</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-4-set"><a href="#2-4-set" class="headerlink" title="2.4 set"></a>2.4 <code>set</code></h3><p>大致同<code>map</code>，区别如下：</p><ul><li>不可以用<code>at</code>和<code>operator[]</code>进行元素访问</li><li>在修改容器方面，同<code>map</code>相比，没有<code>insert_or_assign</code>和<code>try_emplace</code>函数</li></ul><hr><h3 id="2-5-multimap"><a href="#2-5-multimap" class="headerlink" title="2.5  multimap"></a>2.5  <code>multimap</code></h3><p>大致同<code>map</code>，区别是不可以用<code>at</code>和<code>operator[]</code>进行元素访问</p><hr><h3 id="2-6-multiset"><a href="#2-6-multiset" class="headerlink" title="2.6 multiset"></a>2.6 <code>multiset</code></h3><p>大致同<code>set</code></p><hr><h3 id="2-7-unordered-map"><a href="#2-7-unordered-map" class="headerlink" title="2.7 unordered_map"></a>2.7 <code>unordered_map</code></h3><h4 id="2-7-1-类模板声明"><a href="#2-7-1-类模板声明" class="headerlink" title="2.7.1 类模板声明"></a>2.7.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hash</span> = std::hash&lt;Key&gt;,<br>    <span class="hljs-keyword">class</span> KeyEqual = std::equal_to&lt;Key&gt;,<br>    <span class="hljs-keyword">class</span> Allocator = std::allocator&lt;std::pair&lt;<span class="hljs-type">const</span> Key, T&gt;&gt;&gt;<br><span class="hljs-keyword">class</span> unordered_map;<br></code></pre></td></tr></table></figure><h4 id="2-7-2-构造函数"><a href="#2-7-2-构造函数" class="headerlink" title="2.7.2 构造函数"></a>2.7.2 构造函数</h4><h4 id="2-7-3-迭代器"><a href="#2-7-3-迭代器" class="headerlink" title="2.7.3 迭代器"></a>2.7.3 迭代器</h4><ul><li><code>begin</code> <code>cbegin</code></li><li><code>end</code> <code>cend</code></li></ul><h4 id="2-7-4-修改"><a href="#2-7-4-修改" class="headerlink" title="2.7.4 修改"></a>2.7.4 修改</h4><p>同<code>map</code></p><h4 id="2-7-5-查找"><a href="#2-7-5-查找" class="headerlink" title="2.7.5 查找"></a>2.7.5 查找</h4><ul><li><code>at</code></li><li><code>operator[]</code></li><li><code>count</code></li><li><code>find</code></li><li><code>contains</code></li><li><code>equal_range</code></li></ul><h4 id="2-7-6-桶接口"><a href="#2-7-6-桶接口" class="headerlink" title="2.7.6 桶接口"></a>2.7.6 桶接口</h4><ul><li><code>begin(size_type)</code> <code>cbegin(size_type)</code>：返回一个迭代器，指向指定的桶的开始</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">local_iterator <span class="hljs-title">begin</span><span class="hljs-params">(size_type n)</span></span>;<br><span class="hljs-function">const_local_iterator <span class="hljs-title">begin</span><span class="hljs-params">(size_type n)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">const_local_iterator <span class="hljs-title">cbegin</span><span class="hljs-params">(size_type n)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>end(size_type)</code> <code>cend(size_type)</code>：返回一个迭代器，指向指定的桶的末尾</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">local_iterator <span class="hljs-title">end</span><span class="hljs-params">(size_type n)</span></span>;<br><span class="hljs-function">const_local_iterator <span class="hljs-title">end</span><span class="hljs-params">(size_type n)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">const_local_iterator <span class="hljs-title">cend</span><span class="hljs-params">(size_type n)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>bucket_count</code>：返回桶数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">bucket_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>max_bucket_count</code>：返回桶的最大数量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">max_bucket_count</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>bucket_size</code>：返回在特定的桶中的元素数量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">bucket_size</span><span class="hljs-params">(size_type n)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>bucket</code>：返回带有特定键的桶</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">bucket</span><span class="hljs-params">(<span class="hljs-type">const</span> Key &amp;key)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><h4 id="2-7-7-哈希策略"><a href="#2-7-7-哈希策略" class="headerlink" title="2.7.7 哈希策略"></a>2.7.7 哈希策略</h4><ul><li><code>load_factor</code>：返回每个桶的平均元素数量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">load_factor</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>max_load_factor</code>：管理每个桶的平均元素数量的最大值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">max_load_factor</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;  <span class="hljs-comment">// 返回最大加载因子</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">max_load_factor</span><span class="hljs-params">(<span class="hljs-type">float</span> ml)</span></span>; <span class="hljs-comment">//  设置最大加载因子为ml</span><br></code></pre></td></tr></table></figure><ul><li><code>rehash</code>：为至少为指定数量的桶预留存储空间并重新生成散列表</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rehash</span><span class="hljs-params">(size_type count)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>reserve</code>：为至少为指定数量的元素预留存储空间并重新生成哈希表</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reserve</span><span class="hljs-params">(size_type count)</span></span>; <span class="hljs-comment">// 设置桶数为适应至少count个元素，而不超出最大加载因子所需的数，并重哈希容器</span><br></code></pre></td></tr></table></figure><h3 id="2-8-unordered-set"><a href="#2-8-unordered-set" class="headerlink" title="2.8 unordered_set"></a>2.8 <code>unordered_set</code></h3><p>大致同<code>unordered_map</code>，区别如下：</p><ul><li>不可以用<code>at</code>和<code>operator[]</code>进行元素访问</li><li>在修改容器方面，同<code>unordered_map</code>相比，没有<code>insert_or_assign</code>和<code>try_emplace</code>函数</li></ul><h3 id="2-9-unordered-multimap"><a href="#2-9-unordered-multimap" class="headerlink" title="2.9 unordered_multimap"></a>2.9 <code>unordered_multimap</code></h3><p>大致同<code>unordered_map</code>，区别是不可使用<code>at</code>和<code>operator[]</code>进行查找</p><h3 id="2-10-unordered-multiset"><a href="#2-10-unordered-multiset" class="headerlink" title="2.10 unordered_multiset"></a>2.10 <code>unordered_multiset</code></h3><p>大致同<code>unordered_set</code></p>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ Primer Chapter 9</title>
    <link href="/2023/09/03/cpp-primer-chapter-9/"/>
    <url>/2023/09/03/cpp-primer-chapter-9/</url>
    
    <content type="html"><![CDATA[<h1 id="C-Primer-Chapter-9"><a href="#C-Primer-Chapter-9" class="headerlink" title="C++ Primer Chapter 9"></a>C++ Primer Chapter 9</h1><h2 id="1-STL六大组件"><a href="#1-STL六大组件" class="headerlink" title="1. STL六大组件"></a>1. STL六大组件</h2><h3 id="1-1-分配器：空间配置与管理"><a href="#1-1-分配器：空间配置与管理" class="headerlink" title="1.1 分配器：空间配置与管理"></a>1.1 分配器：空间配置与管理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">allocator</span>;<br><br><span class="hljs-comment">// 分配器使用之处</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> vector;<br></code></pre></td></tr></table></figure><h3 id="1-2-迭代器：-统一的访问容器元素的方式，泛型指针"><a href="#1-2-迭代器：-统一的访问容器元素的方式，泛型指针" class="headerlink" title="1.2 迭代器： 统一的访问容器元素的方式，泛型指针"></a>1.2 迭代器： 统一的访问容器元素的方式，泛型指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 可能的实现</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> vector<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    ...<br>    <span class="hljs-keyword">typedef</span> T value_type;<br>    <span class="hljs-keyword">typedef</span> value_type *iterator;<br>    ....<br><span class="hljs-keyword">private</span>:<br>    iterator start;<br>    iterator finish;<br>    ...<br>        <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">iterator <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> start;&#125;<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="1-3-容器：存储和管理数据"><a href="#1-3-容器：存储和管理数据" class="headerlink" title="1.3 容器：存储和管理数据"></a>1.3 容器：存储和管理数据</h3><ul><li><p>顺序容器</p><ul><li><code>array</code>*</li><li><code>deque</code></li><li><code>forward_list</code>*</li><li><code>list</code></li><li><code>string</code></li><li><code>vector</code></li></ul></li><li><p>关联容器</p><ul><li><code>map</code></li><li><code>multimap</code></li><li><code>set</code></li><li><code>multiset</code></li><li><code>unordered_map</code>*</li><li><code>unordered_set</code>*</li><li><code>unordered_multimap</code>*</li><li><code>unordered_multiset</code>*</li></ul></li></ul><p><em>注：带*为自C++11起</em></p><h3 id="1-4-算法：对容器中的数据进行各种操作和处理，如copy、count、find等"><a href="#1-4-算法：对容器中的数据进行各种操作和处理，如copy、count、find等" class="headerlink" title="1.4 算法：对容器中的数据进行各种操作和处理，如copy、count、find等"></a>1.4 算法：对容器中的数据进行各种操作和处理，如<code>copy</code>、<code>count</code>、<code>find</code>等</h3><h3 id="1-5-仿函数（函数对象）：行为类似函数，可作为算法的某种策略，需重载operator"><a href="#1-5-仿函数（函数对象）：行为类似函数，可作为算法的某种策略，需重载operator" class="headerlink" title="1.5 仿函数（函数对象）：行为类似函数，可作为算法的某种策略，需重载operator()"></a>1.5 仿函数（函数对象）：行为类似函数，可作为算法的某种策略，需重载<code>operator()</code></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">greater</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;lhs, <span class="hljs-type">const</span> T &amp;rhs)</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>std::vector&lt;<span class="hljs-type">int</span>&gt; ivec&#123;<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;;<br><br><span class="hljs-comment">// 降序排序</span><br>std::<span class="hljs-built_in">sort</span>(ivec.<span class="hljs-built_in">begin</span>(), ivec.<span class="hljs-built_in">end</span>(), std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br></code></pre></td></tr></table></figure><h3 id="1-6-适配器：修饰容器、仿函数和迭代器接口"><a href="#1-6-适配器：修饰容器、仿函数和迭代器接口" class="headerlink" title="1.6 适配器：修饰容器、仿函数和迭代器接口"></a>1.6 适配器：修饰容器、仿函数和迭代器接口</h3><h4 id="1-6-1-容器适配器"><a href="#1-6-1-容器适配器" class="headerlink" title="1.6.1 容器适配器"></a>1.6.1 容器适配器</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Container</span> = std::deque&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> stack;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Container</span> = std::deque&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> queue;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Container</span> = std::vector&lt;T&gt;,<br>          <span class="hljs-keyword">class</span> Compare = std::less&lt;<span class="hljs-keyword">typename</span> Container::value_type&gt;&gt;<br><span class="hljs-keyword">class</span> priority_queue;<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">适配器</th><th align="center">所需头文件</th><th align="center">底层容器</th><th align="center">元素访问</th><th align="center">容量</th><th align="center">操作</th></tr></thead><tbody><tr><td align="center"><code>stack</code></td><td align="center"><code>&lt;stack&gt;</code></td><td align="center"><code>deque</code>（默认）<br /><code>vector</code><br /><code>list</code></td><td align="center"><code>top</code></td><td align="center"><code>empty</code> <br /><code>size</code></td><td align="center"><code>push</code><br /><code>emplace</code>*<br /><code>pop</code><br /><code>swap</code>*</td></tr><tr><td align="center"><code>queue</code></td><td align="center"><code>&lt;queue&gt;</code></td><td align="center"><code>deque</code>（默认）<br /><code>list</code></td><td align="center"><code>front</code><br /><code>back</code></td><td align="center"><code>empty</code><br /><code>size</code></td><td align="center"><code>push</code><br /><code>emplace</code>*<br /><code>pop</code><br /><code>swap</code>*</td></tr><tr><td align="center"><code>priority_queue</code></td><td align="center"><code>&lt;queue&gt;</code></td><td align="center"><code>vector</code>（默认）<br /><code>deque</code></td><td align="center"><code>top</code></td><td align="center"><code>empty</code><br /><code>size</code></td><td align="center"><code>push</code><br /><code>emplace</code>*<br /><code>pop</code><br /><code>swap</code>*</td></tr><tr><td align="center"><em>注：带*为自C++11起</em></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">成员类型</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center"><code>container_type</code></td><td align="center"><code>Container</code></td></tr><tr><td align="center"><code>value_compare</code>（仅<code>priority_queue</code>）</td><td align="center">Compare（仅<code>priority_queue</code>）</td></tr><tr><td align="center"><code>value_type</code></td><td align="center"><code>Container::value_type</code></td></tr><tr><td align="center"><code>size_type</code></td><td align="center"><code>Container::size_type</code></td></tr><tr><td align="center"><code>reference</code></td><td align="center"><code>Container::reference</code></td></tr><tr><td align="center"><code>const_reference</code></td><td align="center"><code>Container::const_reference</code></td></tr></tbody></table><h4 id="1-6-2-仿函数适配器"><a href="#1-6-2-仿函数适配器" class="headerlink" title="1.6.2 仿函数适配器"></a>1.6.2 仿函数适配器</h4><h4 id="1-6-3-迭代器适配器"><a href="#1-6-3-迭代器适配器" class="headerlink" title="1.6.3 迭代器适配器"></a>1.6.3 迭代器适配器</h4><h2 id="2-顺序容器"><a href="#2-顺序容器" class="headerlink" title="2. 顺序容器"></a>2. 顺序容器</h2><h3 id="2-1-顺序容器概览"><a href="#2-1-顺序容器概览" class="headerlink" title="2.1 顺序容器概览"></a>2.1 顺序容器概览</h3><p><del>所有顺序容器都提供了<strong>顺序</strong>访问元素的能力</del>，所需头文件与容器同名</p><table><thead><tr><th align="center">顺序容器</th><th align="center">大小能否动态变化</th><th align="center">能否随机访问元素</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center"><code>array</code></td><td align="center">&#10006;</td><td align="center">&#10004;</td><td align="center">语义上等同于C风格数组，不能添加&#x2F;删除元素</td></tr><tr><td align="center"><code>deque</code></td><td align="center">&#10004;</td><td align="center">&#10004;</td><td align="center">双端队列，头尾插入&#x2F;删除很快</td></tr><tr><td align="center"><code>forward_list</code></td><td align="center">&#10004;</td><td align="center">&#10006;</td><td align="center">单向链表，任意位置插入&#x2F;删除很快</td></tr><tr><td align="center"><code>list</code></td><td align="center">&#10004;</td><td align="center">&#10006;</td><td align="center">双向链表，任意位置插入&#x2F;删除很快</td></tr><tr><td align="center"><code>string</code></td><td align="center">&#10004;</td><td align="center">&#10004;</td><td align="center">类似<code>vector</code>，专门用于保存字符，尾部插入&#x2F;删除很快</td></tr><tr><td align="center"><code>vector</code></td><td align="center">&#10004;</td><td align="center">&#10004;</td><td align="center">可变大小数组，尾部插入&#x2F;删除很快</td></tr></tbody></table><h3 id="2-2-类型别名"><a href="#2-2-类型别名" class="headerlink" title="2.2 类型别名"></a>2.2 类型别名</h3><table><thead><tr><th>成员类型</th><th>定义</th></tr></thead><tbody><tr><td><code>value_type</code></td><td><code>T</code></td></tr><tr><td><code>size_type</code></td><td>无符号整数类型（通常是 <code>std::size_t</code>）</td></tr><tr><td><code>difference_type</code></td><td>有符号整数类型（通常是 <code>std::ptrdiff_t</code>）</td></tr><tr><td><code>reference</code></td><td><code>value_type&amp;</code></td></tr><tr><td><code>const_reference</code></td><td><code>const value_type&amp;</code></td></tr><tr><td><code>pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::pointer</code></td></tr><tr><td><code>const_pointer</code></td><td><code>std::allocator_traits&lt;Allocator&gt;::const_pointer</code></td></tr><tr><td><code>iterator</code></td><td>LegacyRandomAccessIterator to <code>value_type</code></td></tr><tr><td><code>const_iterator</code></td><td>LegacyRandomAccessIterator to <code>const value_type</code></td></tr><tr><td><code>reverse_iterator</code></td><td><code>std::reverse_iterator&lt;iterator&gt;</code></td></tr><tr><td><code>const_reverse_iterator</code></td><td><code>std::reverse_iterator&lt;const_iterator&gt;</code></td></tr></tbody></table><hr><h3 id="2-3-array"><a href="#2-3-array" class="headerlink" title="2.3 array"></a>2.3 <code>array</code></h3><h4 id="2-3-1-类模板声明"><a href="#2-3-1-类模板声明" class="headerlink" title="2.3.1 类模板声明"></a>2.3.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, std::<span class="hljs-type">size_t</span> N&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">array</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-2-构造函数"><a href="#2-3-2-构造函数" class="headerlink" title="2.3.2 构造函数"></a>2.3.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 聚合初始化</span><br>std::array&lt;<span class="hljs-type">int</span>, 3&gt; arr1 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;;<br>std::array&lt;<span class="hljs-type">int</span>, 3&gt; arr2&#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>&#125;; <span class="hljs-comment">// C++11</span><br>std::array&lt;<span class="hljs-type">int</span>, 3&gt; arr3 = &#123;<span class="hljs-number">3</span>&#125;;    <span class="hljs-comment">// 3 0 0</span><br><span class="hljs-function">std::array&lt;<span class="hljs-type">int</span>, 3&gt; <span class="hljs-title">arr4</span><span class="hljs-params">(arr1)</span></span>;    <span class="hljs-comment">// 3 6 9</span><br></code></pre></td></tr></table></figure><h4 id="2-3-3-元素访问"><a href="#2-3-3-元素访问" class="headerlink" title="2.3.3 元素访问"></a>2.3.3 元素访问</h4><ul><li><p><code>at</code>：访问指定的元素，同时进行越界检查</p></li><li><p><code>operator[]</code>：访问指定的元素</p></li><li><p><code>front</code>：访问第一个元素</p></li><li><p><code>back</code>：访问最后一个元素</p></li><li><p><code>data</code>：直接访问底层数组</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 若!(pos &lt; size()) 则抛出std::out_of_range</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> reference <span class="hljs-title">at</span><span class="hljs-params">(size_type pos)</span></span>;<br><span class="hljs-comment">// 不会做边界检查，若越界会导致未定义行为</span><br><span class="hljs-keyword">constexpr</span> reference <span class="hljs-keyword">operator</span>[](size_type pos);<br><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> reference <span class="hljs-title">front</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> reference <span class="hljs-title">back</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 返回指向作为元素存储工作的底层数组的指针</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> T *<span class="hljs-title">data</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-4-迭代器"><a href="#2-3-4-迭代器" class="headerlink" title="2.3.4 迭代器"></a>2.3.4 迭代器</h4><ul><li><p><code>begin</code> <code>cbegin</code>：返回指向起始的迭代器</p></li><li><p><code>end</code> <code>cend</code>：返回指向末尾的迭代器</p></li><li><p><code>rbegin</code> <code>crbegin</code>：返回指向起始的逆向迭代器</p></li><li><p><code>rend</code> <code>crend</code>：返回指向末尾的逆向迭代器</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::array&lt;<span class="hljs-type">int</span>, 4&gt; iarr&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> rit = iarr.<span class="hljs-built_in">crbegin</span>(); rit != iarr.<span class="hljs-built_in">crend</span>(); ++rit)<br>    std::cout &lt;&lt; *rit &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <span class="hljs-comment">// 4 3 2 1</span><br></code></pre></td></tr></table></figure><h4 id="2-3-5-容量"><a href="#2-3-5-容量" class="headerlink" title="2.3.5 容量"></a>2.3.5 容量</h4><ul><li><code>empty</code>：检查容器是否为空</li><li><code>size</code>：返回容纳的元素数</li><li><code>max_size</code>：返回可容纳的最大元素数。因为每个<code>std::array&lt;T, N&gt;</code>都是固定大小容器，故<code>max_size</code> 返回的值等于 <code>N</code> （亦为<code>size</code>返回的值）</li></ul><h4 id="2-3-6-操作"><a href="#2-3-6-操作" class="headerlink" title="2.3.6 操作"></a>2.3.6 操作</h4><ul><li><code>fill</code>：以指定值填充容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">void</span> <span class="hljs-title">fill</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;value)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>swap</code>：交换内容。将容器内容与 <code>other</code> 的内容交换。<strong>不会导致迭代器和引用关联到别的容器</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(array &amp;other)</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::array&lt;<span class="hljs-type">int</span>, 3&gt; a1&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, a2&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><br><span class="hljs-keyword">auto</span> it1 = a1.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">auto</span> it2 = a2.<span class="hljs-built_in">begin</span>();<br><span class="hljs-type">int</span> &amp;ref1 = a1[<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> &amp;ref2 = a2[<span class="hljs-number">1</span>];<br><br>a1.<span class="hljs-built_in">swap</span>(a2);<br><br>std::cout &lt;&lt; *it1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; *it2 &lt;&lt; std::endl; <span class="hljs-comment">// 4 1</span><br>std::cout &lt;&lt; ref1 &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; ref2 &lt;&lt; std::endl; <span class="hljs-comment">// 5 2</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-4-deque"><a href="#2-4-deque" class="headerlink" title="2.4 deque"></a>2.4 <code>deque</code></h3><h4 id="2-4-1-类模板声明"><a href="#2-4-1-类模板声明" class="headerlink" title="2.4.1 类模板声明"></a>2.4.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> deque;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-构造函数"><a href="#2-4-2-构造函数" class="headerlink" title="2.4.2 构造函数"></a>2.4.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">deque</span>();<br><br><span class="hljs-built_in">deque</span>(size_type count, <span class="hljs-type">const</span> T &amp;value, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">deque</span><span class="hljs-params">(size_type count)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-built_in">deque</span>(InputIt first, InputIt last, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// [first, last)</span><br><br><span class="hljs-built_in">deque</span>(<span class="hljs-type">const</span> deque &amp;other);<br><br><span class="hljs-built_in">deque</span>(deque &amp;&amp;other); <span class="hljs-comment">// C++11</span><br><br><span class="hljs-built_in">eque</span>(std::initializer_list&lt;T&gt; init, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// C++11</span><br></code></pre></td></tr></table></figure><h4 id="2-4-3-元素访问"><a href="#2-4-3-元素访问" class="headerlink" title="2.4.3 元素访问"></a>2.4.3 元素访问</h4><ul><li><code>at</code> </li><li><code>operator[]</code></li><li><code>front</code></li><li><code>back</code></li></ul><h4 id="2-4-4-迭代器"><a href="#2-4-4-迭代器" class="headerlink" title="2.4.4 迭代器"></a>2.4.4 迭代器</h4><ul><li><p><code>begin</code> <code>cbegin</code></p></li><li><p><code>end</code> <code>cend</code></p></li><li><p><code>rbegin</code> <code>crbegin</code></p></li><li><p><code>rend</code> <code>crend</code></p></li></ul><h4 id="2-4-5-容量"><a href="#2-4-5-容量" class="headerlink" title="2.4.5 容量"></a>2.4.5 容量</h4><ul><li><code>empty</code></li><li><code>size</code></li><li><code>max_size</code></li><li><code>shrink_to_fit</code>：通过释放未使用的内存减少内存的使用</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shrink_to_fit</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h4 id="2-4-6-修改"><a href="#2-4-6-修改" class="headerlink" title="2.4.6 修改"></a>2.4.6 修改</h4><ul><li><code>clear</code>：清除内容</li><li><code>insert</code>：插入元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 在pos前插入value</span><br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, <span class="hljs-type">const</span> T &amp;value)</span></span>;<br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, T &amp;&amp;value)</span></span>;<br><br><span class="hljs-comment">// 在pos前插入value的count个副本</span><br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, size_type count, <span class="hljs-type">const</span> T &amp;value)</span></span>;<br><br><span class="hljs-comment">// 在pos前插入来自范围[first, last)的元素</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, InputIt first, InputIt last)</span></span>;<br><br><span class="hljs-comment">//  在pos前插入来自initializer_list ilist的元素</span><br><span class="hljs-function">iterator <span class="hljs-title">insert</span><span class="hljs-params">(const_iterator pos, std::initializer_list&lt;T&gt; ilist)</span></span>;<br></code></pre></td></tr></table></figure></li><li><code>emplace</code>：原位构造元素<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 直接于pos前插入元素到容器中</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function">iterator <span class="hljs-title">emplace</span><span class="hljs-params">(const_iterator pos, Args &amp;&amp;...args)</span></span>;<br></code></pre></td></tr></table></figure></li><li><code>erase</code>：擦除元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// iterator是最后移除元素之后的迭代器</span><br><span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(const_iterator pos)</span></span>;<br><br><span class="hljs-comment">// 移除[first, last)中的元素</span><br><span class="hljs-function">iterator <span class="hljs-title">erase</span><span class="hljs-params">(const_iterator first, const_iterator last)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::deque&lt;<span class="hljs-type">int</span>&gt; ideq = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><br><span class="hljs-keyword">auto</span> it = ideq.<span class="hljs-built_in">erase</span>(ideq.<span class="hljs-built_in">cbegin</span>() + <span class="hljs-number">2</span>);<br><span class="hljs-comment">// ideq: &#123;0, 1, 3, 4, 5&#125;</span><br><span class="hljs-comment">// *it == 2</span><br><br>ideq.<span class="hljs-built_in">erase</span>(ideq.<span class="hljs-built_in">cbegin</span>(), ideq.<span class="hljs-built_in">cbegin</span>() + <span class="hljs-number">3</span>);<br><span class="hljs-comment">// ideq: &#123;4, 5&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>push_back</code>：将元素添加到容器末尾</li><li><code>emplace_back</code>：在容器末尾就地构造元素</li><li><code>pop_back</code>：移除末元素</li><li><code>push_front</code>：插入元素到容器起始</li><li><code>emplace_front</code>：在容器头部原位构造元素</li><li><code>pop_front</code>：移除首元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(T &amp;&amp;value)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">emplace_back</span><span class="hljs-params">(Args &amp;&amp;...args)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push_front</span><span class="hljs-params">(T &amp;&amp;value)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">emplace_front</span><span class="hljs-params">(Args &amp;&amp;...args)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>resize</code>：改变容器中可存储元素的个数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 重设容器大小以容纳 count 个元素，在count == size()时不做任何事</span><br><span class="hljs-comment">// 如果当前大小大于count，那么减小容器到它的开头count个元素</span><br><span class="hljs-comment">// 如果当前大小小于count，那么后附额外的默认插入元素/value副本</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(size_type count)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">resize</span><span class="hljs-params">(size_type count, <span class="hljs-type">const</span> value_type &amp;value)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>swap</code>：交换内容</li></ul><h4 id="2-4-7-其他成员函数"><a href="#2-4-7-其他成员函数" class="headerlink" title="2.4.7 其他成员函数"></a>2.4.7 其他成员函数</h4><ul><li><code>assign</code>：将值赋给容器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(size_type count, <span class="hljs-type">const</span> T &amp;value)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(InputIt first, InputIt last)</span></span>; <span class="hljs-comment">// [first, last)</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assign</span><span class="hljs-params">(std::initializer_list&lt;T&gt; ilist)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>get_allocator</code>：返回相关的分配器</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">allocator_type <span class="hljs-title">get_allocator</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><hr><h3 id="2-5-forward-list"><a href="#2-5-forward-list" class="headerlink" title="2.5 forward_list"></a>2.5 <code>forward_list</code></h3><h4 id="2-5-1-类模板声明"><a href="#2-5-1-类模板声明" class="headerlink" title="2.5.1 类模板声明"></a>2.5.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> forward_list;<br></code></pre></td></tr></table></figure><h4 id="2-5-2-构造函数"><a href="#2-5-2-构造函数" class="headerlink" title="2.5.2 构造函数"></a>2.5.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 全部自C++11</span><br>forward_list();<br><br>forward_list(size_type count, <span class="hljs-type">const</span> T &amp;value, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">forward_list</span><span class="hljs-params">(size_type count)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br>forward_list(InputIt first, InputIt last, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br>forward_list(<span class="hljs-type">const</span> forward_list &amp;other);<br><br>forward_list(forward_list &amp;&amp;other); <br><br>forward_list(std::initializer_list&lt;T&gt; init, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br></code></pre></td></tr></table></figure><h4 id="2-5-3-元素访问"><a href="#2-5-3-元素访问" class="headerlink" title="2.5.3 元素访问"></a>2.5.3 元素访问</h4><ul><li><code>front</code></li></ul><h4 id="2-5-4-迭代器"><a href="#2-5-4-迭代器" class="headerlink" title="2.5.4 迭代器"></a>2.5.4 迭代器</h4><ul><li><code>before_begin</code> <code>cbefore_begin</code>：返回指向第一个元素之前迭代器</li><li><code>begin</code> <code>cbegin</code></li><li><code>end</code> <code>cend</code></li></ul><p><em>注：无反向迭代器，迭代器只支持<strong>自增</strong>运算</em></p><h4 id="2-5-5-容量"><a href="#2-5-5-容量" class="headerlink" title="2.5.5 容量"></a>2.5.5 容量</h4><ul><li><code>empty</code></li><li><code>max_size</code></li></ul><p><em>注：不提供<code>size</code></em></p><h4 id="2-5-6-修改"><a href="#2-5-6-修改" class="headerlink" title="2.5.6 修改"></a>2.5.6 修改</h4><ul><li><code>clear</code></li><li><code>insert_after</code>：在某个元素后插入新元素</li><li><code>emplace_after</code>：在元素后原位构造元素</li><li><code>erase_after</code>：擦除元素后的元素</li><li><code>push_front</code></li><li><code>emplace_front</code></li><li><code>pop_front</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">emplace_after</span>(ifwlist.<span class="hljs-built_in">cbefore_begin</span>(), <span class="hljs-number">0</span>); <span class="hljs-comment">// ifwlist: &#123;0, 1, 2, 3&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>resize</code></li><li><code>swap</code></li></ul><h4 id="2-5-7-操作"><a href="#2-5-7-操作" class="headerlink" title="2.5.7 操作"></a>2.5.7 操作</h4><ul><li><code>merge</code>：合并二个<strong>已排序</strong>列表。操作后<code>other</code>会变为空<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 链表应以升序排序，默认调用operator&lt;比较元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(forward_list &amp;other)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(forward_list &amp;&amp;other)</span></span>;<br><br><span class="hljs-comment">// 使用给定的比较函数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(forward_list &amp;other, Compare comp)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(forward_list &amp;&amp;other, Compare comp)</span></span>;<br><br><span class="hljs-comment">// 比较函数的签名应等价于如下</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Type1 &amp;a, <span class="hljs-type">const</span> Type2 &amp;b)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;, other&#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">merge</span>(other); <span class="hljs-comment">// ifwlist: &#123;0, 1, 2, 3, 4, 5&#125;</span><br><br><span class="hljs-keyword">if</span> (other.<span class="hljs-built_in">empty</span>())<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;empty&quot;</span> &lt;&lt; std::endl; <span class="hljs-comment">// empty</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>&#125;, other&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">merge</span>(other, std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// ifwlist: &#123;5, 4, 3, 2, 1, 0&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>splice_after</code>：从另一<code>forward_list</code>移动元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// other所有元素移动到*this的pos后</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;other)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;&amp;other)</span></span>;<br><br><span class="hljs-comment">// it为待插入元素的前向迭代器</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;other, const_iterator it)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;&amp;other, const_iterator it)</span></span>;<br><br><span class="hljs-comment">// (first, last)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;other, const_iterator first, const_iterator last)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">splice_after</span><span class="hljs-params">(const_iterator pos, forward_list &amp;&amp;other, const_iterator first, const_iterator last)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, other&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">splice_after</span>(ifwlist.<span class="hljs-built_in">cbefore_begin</span>(), other, other.<span class="hljs-built_in">cbegin</span>()); <span class="hljs-comment">// ifwlist: &#123;5, 0, 1, 2, 3&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, other&#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">splice_after</span>(ifwlist.<span class="hljs-built_in">cbefore_begin</span>(), other, other.<span class="hljs-built_in">cbegin</span>(), other.<span class="hljs-built_in">cend</span>()); <span class="hljs-comment">// ifwlist: &#123;5, 6, 0, 1, 2, 3&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>remove</code> <code>remove_if</code>：移除满足特定标准的元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">const</span> T &amp;value)</span></span>;<br><br><span class="hljs-comment">// p：若应该移除该元素则返回true的一元谓词</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">UnaryPredicate</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove_if</span><span class="hljs-params">(UnaryPredicate p)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span><br>&#123;<br>    <span class="hljs-type">int</span> _x;<br>    <span class="hljs-type">int</span> _y;<br><br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) : _x(x), _y(y) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">isOnYAxis</span><span class="hljs-params">(<span class="hljs-type">const</span> Point &amp;p)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> !p._x;<br>&#125;<br><br>std::forward_list&lt;Point&gt; fwlist&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;&#125;;<br><br>fwlist.<span class="hljs-built_in">remove_if</span>(isOnYAxis); <span class="hljs-comment">// fwlist: &#123;&#123;1, 0&#125;, &#123;1, 1&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>reverse</code>：将该链表的所有元素的顺序反转</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">()</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>unique</code>：删除<strong>连续</strong>的重复元素</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 用operator==比较元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unique</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">// 用二元谓词p比较元素</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryPredicate</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unique</span><span class="hljs-params">(BinaryPredicate p)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span><br>&#123;<br>    <span class="hljs-type">int</span> birth_year;<br>    <span class="hljs-type">int</span> birth_month;<br><br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month) : <span class="hljs-built_in">birth_year</span>(year), <span class="hljs-built_in">birth_month</span>(month) &#123;&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSameAge</span><span class="hljs-params">(<span class="hljs-type">const</span> Person &amp;lhs, <span class="hljs-type">const</span> Person &amp;rhs)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (lhs.birth_year == rhs.birth_year)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>std::forward_list&lt;Person&gt; fwlist&#123;&#123;<span class="hljs-number">2001</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2000</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">2001</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2001</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">2001</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">2002</span>, <span class="hljs-number">5</span>&#125;&#125;;<br><br>fwlist.<span class="hljs-built_in">unique</span>(isSameAge); <span class="hljs-comment">// fwlist: &#123;&#123;2001, 1&#125;, &#123;2000, 3&#125;, &#123;2001, 1&#125;, &#123;2002, 5&#125;&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>sort</code>：对元素进行排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 升序，默认调用operator&lt;比较元素</span><br><br><span class="hljs-comment">// 使用给定的比较函数</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Compare comp)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::forward_list&lt;<span class="hljs-type">int</span>&gt; ifwlist&#123;<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;;<br><br>ifwlist.<span class="hljs-built_in">sort</span>(); <span class="hljs-comment">// ifwlist: &#123;0, 1, 2, 3, 4, 5&#125;</span><br><br>ifwlist.<span class="hljs-built_in">sort</span>(std::<span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// ifwlist: &#123;5, 4, 3, 2, 1, 0&#125;</span><br></code></pre></td></tr></table></figure><h4 id="2-5-8-其他成员函数"><a href="#2-5-8-其他成员函数" class="headerlink" title="2.5.8 其他成员函数"></a>2.5.8 其他成员函数</h4><p>同<code>deque</code></p><hr><h3 id="2-6-list"><a href="#2-6-list" class="headerlink" title="2.6 list"></a>2.6 <code>list</code></h3><h4 id="2-6-1-类模板声明"><a href="#2-6-1-类模板声明" class="headerlink" title="2.6.1 类模板声明"></a>2.6.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> list;<br></code></pre></td></tr></table></figure><h4 id="2-6-2-构造函数"><a href="#2-6-2-构造函数" class="headerlink" title="2.6.2 构造函数"></a>2.6.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">list</span>();<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">list</span><span class="hljs-params">(size_type count, <span class="hljs-type">const</span> T &amp;value = T(), <span class="hljs-type">const</span> Allocator &amp;alloc = Allocator())</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">list</span><span class="hljs-params">(size_type count)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-built_in">list</span>(InputIt first, InputIt last, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// [first, last)</span><br><br><span class="hljs-built_in">list</span>(<span class="hljs-type">const</span> list &amp;other);<br><br><span class="hljs-built_in">list</span>(list &amp;&amp;other); <span class="hljs-comment">// C++11</span><br><br><span class="hljs-built_in">list</span>(std::initializer_list&lt;T&gt; init, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// C++11</span><br></code></pre></td></tr></table></figure><h4 id="2-6-3-元素访问"><a href="#2-6-3-元素访问" class="headerlink" title="2.6.3 元素访问"></a>2.6.3 元素访问</h4><ul><li><p><code>front</code></p></li><li><p><code>back</code></p></li></ul><h4 id="2-6-4-迭代器"><a href="#2-6-4-迭代器" class="headerlink" title="2.6.4 迭代器"></a>2.6.4 迭代器</h4><ul><li><p><code>begin</code> <code>cbegin</code></p></li><li><p><code>end</code> <code>cend</code></p></li><li><p><code>rbegin</code> <code>crbegin</code></p></li><li><p><code>rend</code> <code>crend</code></p></li></ul><h4 id="2-6-5-容量"><a href="#2-6-5-容量" class="headerlink" title="2.6.5 容量"></a>2.6.5 容量</h4><ul><li><code>empty</code></li><li><code>size</code></li><li><code>max_size</code></li></ul><h4 id="2-6-6-修改"><a href="#2-6-6-修改" class="headerlink" title="2.6.6 修改"></a>2.6.6 修改</h4><p>同<code>deque</code></p><h4 id="2-6-7-操作"><a href="#2-6-7-操作" class="headerlink" title="2.6.7 操作"></a>2.6.7 操作</h4><p>同<code>forward_list</code></p><h4 id="2-6-8-其他成员函数"><a href="#2-6-8-其他成员函数" class="headerlink" title="2.6.8 其他成员函数"></a>2.6.8 其他成员函数</h4><p>同<code>deque</code></p><hr><h3 id="2-7-string"><a href="#2-7-string" class="headerlink" title="2.7 string"></a>2.7 <code>string</code></h3><h4 id="2-7-1-类模板声明"><a href="#2-7-1-类模板声明" class="headerlink" title="2.7.1 类模板声明"></a>2.7.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">CharT</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Traits</span> = std::char_traits&lt;CharT&gt;, <span class="hljs-keyword">class</span> Allocator = std::allocator&lt;CharT&gt;&gt;<br><span class="hljs-keyword">class</span> basic_string;<br><br><span class="hljs-keyword">typedef</span> basic_string&lt;<span class="hljs-type">char</span>&gt; string;<br></code></pre></td></tr></table></figure><h4 id="2-7-2-构造函数"><a href="#2-7-2-构造函数" class="headerlink" title="2.7.2 构造函数"></a>2.7.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">basic_string</span>();<br><br><span class="hljs-built_in">basic_string</span>(size_type count, CharT ch, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-comment">// [pos, other.size())</span><br><span class="hljs-built_in">basic_string</span>(<span class="hljs-type">const</span> basic_string &amp;other, size_type pos, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());               <br><br><span class="hljs-comment">// [pos, pos + count)</span><br><span class="hljs-built_in">basic_string</span>(<span class="hljs-type">const</span> basic_string &amp;other, size_type pos, size_type count, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-comment">// [s, s + count)</span><br><span class="hljs-built_in">basic_string</span>(<span class="hljs-type">const</span> CharT *s, size_type count, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-built_in">basic_string</span>(<span class="hljs-type">const</span> CharT *s, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-comment">// [first, last) </span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-built_in">basic_string</span>(InputIt first, InputIt last, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-built_in">basic_string</span>(<span class="hljs-type">const</span> basic_string &amp;other);<br><br><span class="hljs-built_in">basic_string</span>(basic_string &amp;&amp;other) <span class="hljs-keyword">noexcept</span>; <span class="hljs-comment">// C++11</span><br><br><span class="hljs-built_in">basic_string</span>(std::initializer_list&lt;CharT&gt; ilist, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// C++11</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><br>std::string s1;                                   <span class="hljs-comment">// 空字符串</span><br><span class="hljs-function">std::string <span class="hljs-title">s2</span><span class="hljs-params">(s)</span></span>;                                <span class="hljs-comment">// &quot;abcdefg&quot;</span><br><span class="hljs-function">std::string <span class="hljs-title">s3</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;                           <span class="hljs-comment">// &quot;aaa&quot;</span><br><span class="hljs-function">std::string <span class="hljs-title">s4</span><span class="hljs-params">(s2, <span class="hljs-number">2</span>)</span></span>;                            <span class="hljs-comment">// &quot;cdefg&quot;</span><br><span class="hljs-function">std::string <span class="hljs-title">s5</span><span class="hljs-params">(s2, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;                         <span class="hljs-comment">// &quot;cde&quot;, [pos, pos + count)</span><br><span class="hljs-function">std::string <span class="hljs-title">s6</span><span class="hljs-params">(s, <span class="hljs-number">4</span>)</span></span>;                             <span class="hljs-comment">// &quot;abcd&quot;, [s, s + count)</span><br><span class="hljs-function">std::string <span class="hljs-title">s7</span><span class="hljs-params">(s2.cbegin() + <span class="hljs-number">2</span>, s2.cbegin() + <span class="hljs-number">6</span>)</span></span>; <span class="hljs-comment">// &quot;cdef&quot;, [first, last)</span><br><span class="hljs-function">std::string <span class="hljs-title">s8</span><span class="hljs-params">(s2)</span></span>;                               <span class="hljs-comment">// &quot;abcdefg&quot;, copy constructor</span><br><span class="hljs-function">std::string <span class="hljs-title">s9</span><span class="hljs-params">(std::move(s2))</span></span>;                    <span class="hljs-comment">// move constructor，s2的值未定义，s9为&quot;abcdefg&quot;</span><br></code></pre></td></tr></table></figure><h4 id="2-7-3-元素访问"><a href="#2-7-3-元素访问" class="headerlink" title="2.7.3 元素访问"></a>2.7.3 元素访问</h4><ul><li><code>at</code></li><li><code>operator[]</code></li><li><code>front</code></li><li><code>back</code></li><li><code>data</code></li><li><code>c_str</code>：将<code>string</code>对象转换为C风格字符串，<code>c_str</code>与 <code>data</code>功能相同。通过 <code>c_str()</code> 写入字符数组是未定义行为</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">const</span> CharT* <span class="hljs-title">c_str</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; <span class="hljs-string">&#x27;\0&#x27;</span> != str[i]; ++i)<br>        std::cout &lt;&lt; str[i];<br>    std::cout &lt;&lt; std::endl;<br>&#125;<br><br><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello World&quot;</span>)</span></span>;<br><span class="hljs-built_in">print</span>(s.<span class="hljs-built_in">c_str</span>()); <span class="hljs-comment">//  Hello World</span><br></code></pre></td></tr></table></figure><h4 id="2-7-4-迭代器"><a href="#2-7-4-迭代器" class="headerlink" title="2.7.4 迭代器"></a>2.7.4 迭代器</h4><ul><li><code>begin</code> <code>cbegin</code></li><li><code>end</code> <code>cend</code></li><li><code>rbegin</code> <code>crbegin</code></li><li><code>rend</code> <code>crend</code></li></ul><h4 id="2-7-5-容量"><a href="#2-7-5-容量" class="headerlink" title="2.7.5 容量"></a>2.7.5 容量</h4><ul><li><p><code>empty</code></p></li><li><p><code>size</code> <code>lenghth</code>：返回字符数</p></li><li><p><code>max_size</code></p></li><li><p><code>reserve</code>：设置预留空间大小，避免不断重新分配内存</p></li><li><p><code>capacity</code>：返回当前对象分配的存储空间能保存的字符数量</p></li><li><p><code>shrink_to_fit</code>：通过释放不使用内存减少内存使用，减少<code>capacity</code>到<code>size</code>的非强制请求，<strong>是否满足请求取依赖于实现</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reserve</span><span class="hljs-params">(size_type new_cap = <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">size_type <span class="hljs-title">capacity</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">shrink_to_fit</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br>std::cout &lt;&lt; s.<span class="hljs-built_in">capacity</span>() &lt;&lt; std::endl;<br>s.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">50</span>);<br>std::cout &lt;&lt; s.<span class="hljs-built_in">capacity</span>() &lt;&lt; std::endl;<br>s.<span class="hljs-built_in">shrink_to_fit</span>();<br>std::cout &lt;&lt; s.<span class="hljs-built_in">capacity</span>() &lt;&lt; std::endl;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">可能的输出</span><br><span class="hljs-comment">20</span><br><span class="hljs-comment">50</span><br><span class="hljs-comment">20</span><br><span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h4 id="2-7-6-操作"><a href="#2-7-6-操作" class="headerlink" title="2.7.6 操作"></a>2.7.6 操作</h4><ul><li><code>clear</code></li><li><code>insert</code></li><li><code>erase</code></li><li><code>push_back</code></li><li><code>pop_back</code></li><li><code>append</code></li><li><code>operator+=</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">basic_string &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> basic_string &amp;str);<br>basic_string &amp;<span class="hljs-keyword">operator</span>+=(CharT ch);<br>basic_string &amp;<span class="hljs-keyword">operator</span>+=(<span class="hljs-type">const</span> CharT *s);<br>basic_string &amp;<span class="hljs-keyword">operator</span>+=(std::initializer_list&lt;CharT&gt; ilist);<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello&quot;</span>)</span>, <span class="hljs-title">s1</span><span class="hljs-params">(<span class="hljs-string">&quot; Worl&quot;</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">ch</span><span class="hljs-params">(<span class="hljs-string">&#x27;d&#x27;</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span> *<span class="hljs-title">str</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello World&quot;</span>)</span></span>;<br><br>s += s1; <span class="hljs-comment">// &quot;Hello Worl&quot;</span><br>s += ch; <span class="hljs-comment">// &quot;Hello World&quot;</span><br>s.<span class="hljs-built_in">clear</span>();<br>s += str;<br>s += &#123;<span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;!&#x27;</span>&#125;; <span class="hljs-comment">// &quot;Hello World!!!&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>compare</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> basic_string &amp;str)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(size_type pos1, size_type count1, <span class="hljs-type">const</span> basic_string &amp;str)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(size_type pos1, size_type count1, <span class="hljs-type">const</span> basic_string &amp;str, size_type pos2, size_type count2)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> CharT *s)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(size_type pos1, size_type count1, <span class="hljs-type">const</span> CharT *s)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(size_type pos1, size_type count1, <span class="hljs-type">const</span> CharT *s, size_type count2)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>starts_with</code><em>(C++20)</em></li><li><code>ends_with</code><em>(C++20)</em></li><li><code>contains</code><em>(C++23)</em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(CharT c)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">contains</span><span class="hljs-params">(<span class="hljs-type">const</span> CharT *s)</span> <span class="hljs-type">const</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>replace</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(size_type pos, size_type count, <span class="hljs-type">const</span> basic_string &amp;str)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, <span class="hljs-type">const</span> basic_string &amp;str)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(size_type pos, size_type count, <span class="hljs-type">const</span> basic_string &amp;str, size_type pos2, size_type count2)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(size_type pos, size_type count, <span class="hljs-type">const</span> CharT *cstr, size_type count2)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, <span class="hljs-type">const</span> CharT *cstr, size_type count2)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(size_type pos, size_type count, <span class="hljs-type">const</span> CharT *cstr)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, <span class="hljs-type">const</span> CharT *cstr)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(size_type pos, size_type count, size_type count2, CharT ch)</span></span>;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, size_type count2, CharT ch)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, InputIt first2, InputIt last2)</span></span>;<br><br><span class="hljs-function">basic_string &amp;<span class="hljs-title">replace</span><span class="hljs-params">(const_iterator first, const_iterator last, std::initializer_list&lt;CharT&gt; ilist)</span></span>;<br></code></pre></td></tr></table></figure><ul><li><code>substr</code>：返回子串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">basic_string <span class="hljs-title">substr</span><span class="hljs-params">(size_type pos = <span class="hljs-number">0</span>, size_type count = npos)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// [pos, pos + count)</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello World&quot;</span>)</span></span>;<br><br>std::cout &lt;&lt; s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &lt;&lt; std::endl; <span class="hljs-comment">// llo</span><br></code></pre></td></tr></table></figure><ul><li><code>copy</code>：复制字符，<strong>产生的字符串不是空终止的</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">size_type <span class="hljs-title">copy</span><span class="hljs-params">(CharT *dest, size_type count, size_type pos = <span class="hljs-number">0</span>)</span> <span class="hljs-type">const</span></span>; <span class="hljs-comment">// 复制子串[pos, pos + count)到dest</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-type">char</span> arr[<span class="hljs-number">6</span>];<br><span class="hljs-built_in">memset</span>(arr, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-built_in">sizeof</span>(arr) / <span class="hljs-built_in">sizeof</span>(arr[<span class="hljs-number">0</span>]));<br><br><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;Hello World&quot;</span>)</span></span>;<br>s.<span class="hljs-built_in">copy</span>(arr, <span class="hljs-number">5</span>);<br>std::cout &lt;&lt; arr &lt;&lt; std::endl; <span class="hljs-comment">// Helloa</span><br></code></pre></td></tr></table></figure><ul><li><code>resize</code></li><li><code>swap</code></li></ul><h4 id="2-7-7-查找"><a href="#2-7-7-查找" class="headerlink" title="2.7.7 查找"></a>2.7.7 查找</h4><ul><li><code>find</code></li><li><code>rfind</code></li><li><code>find_first_of</code></li><li><code>find_first_not_of</code></li><li><code>find_last_of</code></li><li><code>find_last_not_of</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 其他五个只有函数名不同</span><br><span class="hljs-function">size_type <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> basic_string &amp;str, size_type pos = <span class="hljs-number">0</span>)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br><span class="hljs-function">size_type <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> CharT *s, size_type pos, size_type count)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">size_type <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">const</span> CharT *s, size_type pos = <span class="hljs-number">0</span>)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function">size_type <span class="hljs-title">find</span><span class="hljs-params">(CharT ch, size_type pos = <span class="hljs-number">0</span>)</span> <span class="hljs-type">const</span> <span class="hljs-keyword">noexcept</span></span>;<br></code></pre></td></tr></table></figure><h4 id="2-7-8-常量"><a href="#2-7-8-常量" class="headerlink" title="2.7.8 常量"></a>2.7.8 常量</h4><ul><li><code>npos</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">static</span> <span class="hljs-type">const</span> size_type npos = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 特殊值，等于size_type类型可表示的最大值</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">std::string s = <span class="hljs-string">&quot;test&quot;</span>;<br><span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;a&#x27;</span>) == std::string::npos)<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;no &#x27;a&#x27; in &#x27;test&#x27;\n&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-7-9-数制转换（非成员函数）"><a href="#2-7-9-数制转换（非成员函数）" class="headerlink" title="2.7.9 数制转换（非成员函数）"></a>2.7.9 数制转换（非成员函数）</h4><p>所需头文件<code>&lt;string&gt;</code></p><ul><li><code>stoi</code><em>(C++11)</em></li><li><code>stol</code><em>(C++11)</em></li><li><code>stoll</code><em>(C++11)</em></li><li><code>stoul</code> <code>stoull</code><em>(C++11)</em></li><li><code>stof</code> <code>stod</code> <code>stold</code><em>(C++11)</em></li><li><code>to_string</code><em>(C++11)</em></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">stoi</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;str, std::<span class="hljs-type">size_t</span> *pos = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> base = <span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">// 底的合法集是&#123;0,2,3,...,36&#125;</span><br>...<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">stof</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;str, std::<span class="hljs-type">size_t</span> *pos = <span class="hljs-number">0</span>)</span></span>;<br>...<br><span class="hljs-function">std::string <span class="hljs-title">to_string</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;111&quot;</span>)</span></span>;<br><br>std::cout &lt;&lt; std::<span class="hljs-built_in">stoi</span>(s, <span class="hljs-literal">nullptr</span>, <span class="hljs-number">2</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 7</span><br><br>std::cout &lt;&lt; std::<span class="hljs-built_in">to_string</span>(<span class="hljs-number">1.2e+4</span>) &lt;&lt; std::endl; <span class="hljs-comment">// 12000.000000</span><br></code></pre></td></tr></table></figure><h4 id="2-7-10-其他成员函数"><a href="#2-7-10-其他成员函数" class="headerlink" title="2.7.10 其他成员函数"></a>2.7.10 其他成员函数</h4><p>同<code>deque</code></p><h3 id="2-8-vector"><a href="#2-8-vector" class="headerlink" title="2.8 vector"></a>2.8 <code>vector</code></h3><h4 id="2-8-1-类模板声明"><a href="#2-8-1-类模板声明" class="headerlink" title="2.8.1 类模板声明"></a>2.8.1 类模板声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Allocator</span> = std::allocator&lt;T&gt;&gt;<br><span class="hljs-keyword">class</span> vector;<br></code></pre></td></tr></table></figure><h4 id="2-8-2-构造函数"><a href="#2-8-2-构造函数" class="headerlink" title="2.8.2 构造函数"></a>2.8.2 构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">vector</span>();<br><br><span class="hljs-built_in">vector</span>(size_type count, <span class="hljs-type">const</span> T &amp;value, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">vector</span><span class="hljs-params">(size_type count)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIt</span>&gt;<br><span class="hljs-built_in">vector</span>(InputIt first, InputIt last, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>());<br><br><span class="hljs-built_in">vector</span>(<span class="hljs-type">const</span> vector &amp;other);<br><br><span class="hljs-built_in">vector</span>(vector &amp;&amp;other); <span class="hljs-comment">// C++11</span><br><br><span class="hljs-built_in">vector</span>(std::initializer_list&lt;T&gt; init, <span class="hljs-type">const</span> Allocator &amp;alloc = <span class="hljs-built_in">Allocator</span>()); <span class="hljs-comment">// C++11</span><br></code></pre></td></tr></table></figure><h4 id="2-8-3-元素访问"><a href="#2-8-3-元素访问" class="headerlink" title="2.8.3 元素访问"></a>2.8.3 元素访问</h4><ul><li><p><code>at</code></p></li><li><p><code>operator[]</code></p></li><li><p><code>front</code></p></li><li><p><code>back</code></p></li><li><p><code>data</code></p></li></ul><h4 id="2-8-4-迭代器"><a href="#2-8-4-迭代器" class="headerlink" title="2.8.4 迭代器"></a>2.8.4 迭代器</h4><ul><li><code>begin</code> <code>cbegin</code></li><li><code>end</code> <code>cend</code></li><li><code>rbegin</code> <code>crbegin</code></li><li><code>rend</code> <code>crend</code></li></ul><h4 id="2-8-5-容量"><a href="#2-8-5-容量" class="headerlink" title="2.8.5 容量"></a>2.8.5 容量</h4><ul><li><code>empty</code></li><li><code>size</code> </li><li><code>max_size</code></li><li><code>reserve</code></li><li><code>capacity</code></li><li><code>shrink_to_fit</code></li></ul><h4 id="2-8-6-修改"><a href="#2-8-6-修改" class="headerlink" title="2.8.6 修改"></a>2.8.6 修改</h4><ul><li><code>clear</code></li><li><code>insert</code></li><li><code>emplace</code><em>(C++11)</em></li><li><code>erase</code></li><li><code>push_back</code></li><li><code>emplace_back</code><em>(C++11)</em></li><li><code>pop_back</code></li><li><code>resize</code></li><li><code>swap</code></li></ul><h4 id="2-8-7-特化"><a href="#2-8-7-特化" class="headerlink" title="2.8.7 特化"></a>2.8.7 特化</h4><p><code>vector&lt;bool&gt;</code> ：节省空间的动态<code>bitset </code></p><h4 id="2-8-8-其他成员函数"><a href="#2-8-8-其他成员函数" class="headerlink" title="2.8.8 其他成员函数"></a>2.8.8 其他成员函数</h4><p>同<code>deque</code></p>]]></content>
    
    
    <categories>
      
      <category>Language</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
